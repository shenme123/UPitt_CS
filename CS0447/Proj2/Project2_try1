.data
	inifrog:	.space	16
	inilava:	.space	16
	inilily1:	.space	16
	inilily2:	.space	16
	inilily3:	.space	16
	updatefrog:	.space	16
	stone1:		.space	20
	stone3:		.space	20
	stone5:		.space	20

.text
################## initial unchange blocks ############
	# inifrog
	li	$a2, 3
	la	$a0, inifrog
	li	$s1, 31
	sw	$s1, 0($a0)
	li	$s1, 56
	sw	$s1, 4($a0)
	li	$s1, 33
	sw	$s1, 8($a0)
	li	$s1, 58
	sw	$s1, 12($a0)
	
	jal	_setBlock
	# inilava	
	li	$a2, 1
	la	$a0, inilava
	li	$s1, 0
	sw	$s1, 0($a0)
	li	$s1, 8
	sw	$s1, 4($a0)
	li	$s1, 64
	sw	$s1, 8($a0)
	li	$s1, 56
	sw	$s1, 12($a0)
	
	jal	_setBlock
	# inilily1
	li	$a2, 3
	la	$a0, inilily1
	li	$s1, 0
	sw	$s1, 0($a0)
	li	$s1, 6
	sw	$s1, 4($a0)
	li	$s1, 6
	sw	$s1, 8($a0)
	li	$s1, 8
	sw	$s1, 12($a0)	
	jal	_setBlock	
	# inilily2
	li	$a2, 3
	la	$a0, inilily2
	li	$s1, 29
	sw	$s1, 0($a0)
	li	$s1, 6
	sw	$s1, 4($a0)
	li	$s1, 35
	sw	$s1, 8($a0)
	li	$s1, 8
	sw	$s1, 12($a0)	
	jal	_setBlock	
	# inilily3
	li	$a2, 3
	la	$a0, inilily3
	li	$s1, 58
	sw	$s1, 0($a0)
	li	$s1, 6
	sw	$s1, 4($a0)
	li	$s1, 64
	sw	$s1, 8($a0)
	li	$s1, 8
	sw	$s1, 12($a0)		
	jal	_setBlock
################# done initial unchange blocks #######################

	# move frog
	li	$s0, 31						# occupied : s0, s1
	li	$s1, 56

################# initial stones ####################################	
	##### initial stone 1
	li	$a1, 5		# gen lehgth
	li	$v0, 42
	syscall
	addi	$s2, $a0, 8	# stone length
	li	$a1, 54
	syscall
	move	$s3, $a0	# gen start position
	la	$a0, stone1	# initial stone x and y
	sw	$s2, 16($a0)
	sw	$s3, 0($a0)
	add	$s3, $s3, $s2
	sw	$s3, 8($a0)
	li	$s2, 8	
	sw	$s2, 4($a0)
	addi	$s2, $s2, 8
	sw	$s2, 12($a0)
	
	##### initial stone 3
	li	$a1, 5		# gen lehgth
	li	$v0, 42
	syscall
	addi	$s2, $a0, 8	# stone length
	li	$a1, 54
	syscall
	move	$s3, $a0	# gen start position
	la	$a0, stone3	# initial stone x and y
	sw	$s2, 16($a0)
	sw	$s3, 0($a0)
	add	$s3, $s3, $s2
	sw	$s3, 8($a0)
	li	$s2, 24	
	sw	$s2, 4($a0)
	addi	$s2, $s2, 8
	sw	$s2, 12($a0)
	
	##### initial stone 5
	li	$a1, 5		# gen lehgth
	li	$v0, 42
	syscall
	addi	$s2, $a0, 8	# stone length
	li	$a1, 54
	syscall
	move	$s3, $a0	# gen start position
	la	$a0, stone5	# initial stone x and y
	sw	$s2, 16($a0)
	sw	$s3, 0($a0)
	add	$s3, $s3, $s2
	sw	$s3, 8($a0)
	li	$s2, 40	
	sw	$s2, 4($a0)
	addi	$s2, $s2, 8
	sw	$s2, 12($a0)
##################### done initial stones ##########################
loop:
	move	$a0, $s0		# don't use s0 & s1 later on.
	move	$a1, $s1

	jal	_getKeyPress
	beq	$v0, $0, wait
	move	$a2, $v0
	jal	_moveFrog
	move	$s0, $v0
	move	$s1, $v1
  wait:	
	li	$v0, 32		# wait for 200ms
	li	$a0, 200
	syscall
	
	
	la	$a0, stone1	# stone: s2 = x(left) , s3 = x(right), x4 = y
	jal	_updateStone
	
	la	$a0, stone3
	jal	_updateStone
	
	la	$a0, stone5
	jal	_updateStone
	
	j	loop

exit:
	li	$v0, 10
	syscall	


############### _updateRock ##############
	# void _updatdStone (int[] block, int color)
	# a0 = address of block, a2 = color
_updateStone:
	addi	$sp, $sp, -4
	sw	$ra, 0($sp)
	
	move	$t8, $a0
	li	$a2, 1
	jal	_setBlock
	move	$a0, $t8
	lw	$t4, 0($t8)	# t4: x1
	bne	$t4, 63, move_right
	sw	$0, 0($t8)
	sw	$0, 8($t8)
	li	$a1, 5		# gen random
	li	$v0, 42
	syscall
	addi	$t2, $a0, 8	# stone length
	move	$a0, $t8	# initial stone x and y
	sw	$t2, 16($a0)
	j	us_return
  move_right:
  	lw	$t5, 16($t8)	# t5: length
	lw	$t6, 8($t8)	# t6: x2
	blt	$t6, $t5, no_x1change
#	blt	$t4, 1, no_x1change
	addi	$t4, $t4, 1
	sw	$t4, 0($t8)
  no_x1change:
 	beq 	$t6, 64, no_x2change
  	addi	$t6, $t6, 1
  	sw	$t6, 8($t8)
  no_x2change:
  	li	$a2, 2
  	jal	_setBlock
  	move	$v0, $t4
  	move	$v1, $t6
  us_return:	
  	lw	$ra, 0($sp)
  	addi	$sp, $sp, 4
  	jr	$ra
	
	
############### _moveFrog  ###############
	# (int newx, int newy) _moveFrog(int x, int y)
	# $a0 = x, $a1 = y
_moveFrog:
	addi	$sp, $sp, -12	# stack
	sw	$ra, 0($sp)
	sw	$a0, 4($sp)
	sw	$a1, 8($sp)
	
	bne	$a2, 227, notRight	# isRight?
	bne	$a0, 61, newxyr
  	move	$v0, $a0
  	move	$v1, $a1
  	j	moveReturn	
    newxyr:
	addi	$t1, $a0, 2		
	j	moveFrog
  notRight:
  	bne	$a2, 226, notLeft	# isLeft?
  	bne	$a0, 1, newxyl
  	move	$v0, $a0
  	move	$v1, $a1
  	j	moveReturn
    newxyl:
  	addi	$t1, $a0, -2
  	j	moveFrog
  notLeft:	
  	bne	$a2, 225, notDown	# isDown?
  	bne	$a1, 62, newxyd
  	move	$v0, $a0
  	move	$v1, $a1
  	j	moveReturn
    newxyd:
    	move	$t1, $a0
    	addi	$a1, $a1, 2
    	j	moveFrog
  notDown:
    	bne	$a2, 224, notUp		# isUp?
  	bne	$a1, 0, newxyu
  	move	$v0, $a0
  	move	$v1, $a1
  	j	moveReturn
    newxyu:
    	move	$t1, $a0
    	addi	$a1, $a1, -2
    	j	moveFrog
  notUp:
	j	moveReturn
	# set color
  moveFrog:
  	la	$a0, updatefrog
  	sw	$t1, 0($a0)
  	move	$v0, $t1
  	sw	$a1, 4($a0)
  	move	$v1, $a1
  	addi	$t1, $t1, 2
  	sw	$t1, 8($a0)
  	addi	$t1, $a1, 2
  	sw	$t1, ,12($a0)
  	li	$a2, 3
  	jal	_setBlock
  	la	$a0, updatefrog
    	lw	$t0, 4($sp)
  	sw	$t0, 0($a0)
  	addi	$t0, $t0, 2
  	sw	$t0, 8($a0)
  	lw	$t0, 8($sp)
  	sw	$t0, 4($a0)
  	addi	$t0, $t0, 2
  	sw	$t0, 12($a0)
  	li	$a2, 0
  	jal	_setBlock
  	j	moveReturn

  moveReturn:
	lw	$ra, 0($sp)	# epi-stack
	addi	$sp, $sp, 12
	jr	$ra

############### _setBlock  ###############
	# void _setFrog(int[] block, int color)
	# a0 = address of block, a2 = color
	# use $t4 & $t6 for x, $t5 & $t7 for y
_setBlock:
	addi	$sp, $sp, -4	# stack
	sw	$ra, 0($sp)
	
	move	$t8, $a0
	lw	$t6, 8($t8)
	lw	$t7, 12($t8)
	lw	$t5, 4($t8)
  rows:
	lw	$t4, 0($t8)
  columns:
  	move	$a0, $t4
  	move	$a1, $t5
  	
  	jal	_setLED
  	
  	addi	$t4, $t4, 1
  	slt	$t0, $t4, $t6
  	bne	$t0, $0, columns
  	
  	addi	$t5, $t5, 1
  	slt	$t0, $t5, $t7
  	bne	$t0, $0, rows
  	
  	lw	$ra, 0($sp)	# epi-stack
  	addi	$sp, $sp, 4
  	jr	$ra
	

	# void _setLED(int x, int y, int color)
	#   sets the LED at (x,y) to color
	#   color: 0=off, 1=red, 2=orange, 3=green
	#
	# warning:   x, y and color are assumed to be legal values (0-63,0-63,0-3)
	# arguments: $a0 is x, $a1 is y, $a2 is color 
	# trashes:   $t0-$t3
	# returns:   none
	#
_setLED:
	# byte offset into display = y * 16 bytes + (x / 4)
	sll	$t0,$a1,4      # y * 16 bytes
	srl	$t1,$a0,2      # x / 4
	add	$t0,$t0,$t1    # byte offset into display
	li	$t2,0xffff0008	# base address of LED display
	add	$t0,$t2,$t0    # address of byte with the LED
	# now, compute led position in the byte and the mask for it
	andi	$t1,$a0,0x3    # remainder is led position in byte
	neg	$t1,$t1        # negate position for subtraction
	addi	$t1,$t1,3      # bit positions in reverse order
	sll	$t1,$t1,1      # led is 2 bits
	# compute two masks: one to clear field, one to set new color
	li	$t2,3		
	sllv	$t2,$t2,$t1
	not	$t2,$t2        # bit mask for clearing current color
	sllv	$t1,$a2,$t1    # bit mask for setting color
	# get current LED value, set the new field, store it back to LED
	lbu	$t3,0($t0)     # read current LED value	
	and	$t3,$t3,$t2    # clear the field for the color
	or	$t3,$t3,$t1    # set color field
	sb	$t3,0($t0)     # update display
	jr	$ra


	# int _getLED(int x, int y)
	#   returns the value of the LED at position (x,y)
	#
	#  warning:   x and y are assumed to be legal values (0-63,0-63)
	#  arguments: $a0 holds x, $a1 holds y
	#  trashes:   $t0-$t2
	#  returns:   $v0 holds the value of the LED (0, 1, 2, 3)
	#
_getLED:
	# byte offset into display = y * 16 bytes + (x / 4)
	sll  $t0,$a1,4      # y * 16 bytes
	srl  $t1,$a0,2      # x / 4
	add  $t0,$t0,$t1    # byte offset into display
	la   $t2,0xffff0008
	add  $t0,$t2,$t0    # address of byte with the LED
	# now, compute bit position in the byte and the mask for it
	andi $t1,$a0,0x3    # remainder is bit position in byte
	neg  $t1,$t1        # negate position for subtraction
	addi $t1,$t1,3      # bit positions in reverse order
    	sll  $t1,$t1,1      # led is 2 bits
	# load LED value, get the desired bit in the loaded byte
	lbu  $t2,0($t0)
	srlv $t2,$t2,$t1    # shift LED value to lsb position
	andi $v0,$t2,0x3    # mask off any remaining upper bits
	jr   $ra


	# int _getKeyPress(void)
	#	returns the key last pressed, unless there is none
	#
	# trashes: $t0-$t1
	# returns in $v0:
	#	0	No key pressed
	# 	0x42	Middle button pressed
	# 	0xE0	Up arrow 
	# 	0xE1	Down arrow 
	# 	0xE2	Left arrow 
	# 	0xE3 Right arrow
	#
_getKeyPress:
	la	$t1, 0xffff0000			# status register
	li	$v0, 0				# default to no key pressed
	lw	$t0, 0($t1)			# load the status
	beq	$t0, $zero, _keypress_return	# no key pressed, return
	lw	$v0, 4($t1)			# read the key pressed
_keypress_return:
	jr $ra
