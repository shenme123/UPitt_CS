SAMPLE #1

QUESTION #1
----------

Evalute the following expressions: ( what value do they produce?)


a) Assume int x=3;  
		
	(x/10)                    evaluates to:  0
		
	(x/2.0)                   evaluates to:  1.5
		
	(x + 5 * 4 + 3 / 2)       evaluates to:  24

         3 +  20   + 1

            


b) Assume boolean b1 = true, b2 = false; int i = 100, j = -4;

	b1 ||	(j>0)  ||  (b2 && i==100)  evaluates to:  true

	b1 && (b2 || i>j) && (b1 != b2)    evaluates to:  true

	(b2 || !b2)                        evaluates to:  true

c) Go back to (b) and circle the operators that short circuit:  the first || in the first expression short circuits


d) Write INVALID after any of the following statements if they are invalid

   Assume: String s1,s2; int i,j ; double d1,d2;

	s1 = "Hello World";

	s2 = "314159"; // ** BUG FIXED **

	s1 = 3.14159;     // INVALID - can't assign a double into a String

	d1 = s2;          // INVALID - can't assign a String into a double 

	d2 = "2.1782818"; // INVALID - can't assign a String into a double 

	i = 1 + 1/2.0 + 1/3.0 + 1/4.0; // INVALID - can't assign a double into an int (loss of precision will not be allowed)

e) Assume the follwing code fragment: 

int i = 9; 
boolean b;


if (i>0)
{
    b = (1 % 2) != 0;
    i = i % 2;
}
else
{
    i = i + (i%2);
    b = false;
}

if (i%2 ==0 )
{
     if (i>0)
     {
          i = 7;
          b = true;
     }
}
else
{
    if (b)
         i = 9 - (i%5);
    else
         b = (i%2) != 0 ;
}
   
 
What are the final values of b and i ?  ANSWER: b==true  i==8



----------------------------------------------------------
	CS 007 PEOPLE CAN IGNORE EVERYTHING BELOW
----------------------------------------------------------


QUESTION #2
-----------

Assume the following class definition file named "Account.java"

public class Account
{
   String name;
   int    balance; 

   // ** BUG FIX ** made the C'Tor public - otherwse you can't call it from main

   public Account( String nam, int bal)
   {
     name = nam;
     balance  = bal;
   }

   public void deposit( int amt )
   {
     balance += amt;
   }
   public void withdrawl( int amt )
   {
     balance -= amt;
   }
} //EOF


2.1) List 2 things that are "deficient", "bad" or "dangerous" etc. about this class definition. Explain why.
	#1) withdrawl should check the balance first
	#2) C'Tor allows negative initial balance


2.2) rewrite one of the methods in Account such that it does apropriate error checking
   and prevents the object from going into a "bad" state.
   hint: as for "bad state" - think like a banker not just a programmer

   (write that modified method right here)

   public void withdrawl( int amt )
   {
     if (balance < amt )
	throw new RuntimeException("Account::withdrawl() Overdraft attempt exception");
     balance -= amt;
   }


2.3) write a method for the Account class such that whenever we do this out in main:

	Account customer1 = new Account( "Tim", 1000 );
	System.out.println( customer1 );

   then we get this output -->  Name: Tim  Balance: 1000

   (write that method right here)
	public String toString()
	{
		return "Name: " + name + "  Balance: " + balance;
	}

2.4) Look back to the Account class then consider this code in main:

   Account customer1 = new Account("George", 9000 );
   Account customer2 = new Account("Laura", 2000 );

   customer1.transferTo( customer2, 3000 );   // <-- assume this method exists in Account
   System.out.println( customer1 ) ; // assume output is: Name: George  Balance: 6000
   System.out.println( customer2 ) ; // assume output is: Name: Laura  Balance: 5000

2.5)  What is the data type of the first parameter the transfer2 method is taking ?
	
	answer: it is of type Account or more precisely, reference to Account

2.6)  Write the transferTo method for the Account class that accomplishes the above 
	  (type it in right here)
	  
	public void transferTo( Account other, int amt )
	{
		this.withdrawl( amt ); // let the withdrawl do the error checking
		other.deposit( amt );
	}


2.7) what would you have to add to the transferTo method to avoid putting either
	 account into a "bad" state (again.. think banker.. not just programmer)   
	
	answer: We could put a test in for sufficient balance OR just let the withdrawl
	             method do it's error checking

   